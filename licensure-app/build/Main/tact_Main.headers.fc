;;
;; Header files for Main
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $LicenseCreate$_load
(slice, ((slice, slice, slice, slice, slice, slice, slice, int, slice, slice))) $LicenseCreate$_load(slice sc_0) inline_ref;

;; $License$_store
builder $License$_store(builder build_0, (int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline_ref;

;; $License$_store_cell
cell $License$_store_cell((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline;

;; $License$_not_null
((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $License$_not_null(tuple v) inline;

;; $License$_store_opt
cell $License$_store_opt(tuple v) inline;

;; $License$_load
(slice, ((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice))) $License$_load(slice sc_0) inline_ref;

;; $License$_as_optional
tuple $License$_as_optional((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline;

;; $License$_load_opt
tuple $License$_load_opt(cell cl) inline;

;; $LicenseArray$_store
builder $LicenseArray$_store(builder build_0, (cell, int) v) inline;

;; $LicenseArray$_load
(slice, ((cell, int))) $LicenseArray$_load(slice sc_0) inline;

;; $LicenseDelete$_load
(slice, ((int))) $LicenseDelete$_load(slice sc_0) inline;

;; $LicenseBuy$_load
(slice, ((int, slice))) $LicenseBuy$_load(slice sc_0) inline;

;; $Main$_store
builder $Main$_store(builder build_0, (int, (cell, int), cell) v) inline;

;; $Main$_load
(slice, ((int, (cell, int), cell))) $Main$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $License$_to_external
(int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) $License$_to_external(((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) v) inline;

;; $LicenseArray$_to_external
(cell, int) $LicenseArray$_to_external(((cell, int)) v) inline;

;; $Main$init$_load
(slice, ((int))) $Main$init$_load(slice sc_0) inline;

;; $LicenseArray$_constructor_map
((cell, int)) $LicenseArray$_constructor_map(cell map) inline;

;; $Main$_contract_init
(int, (cell, int), cell) $Main$_contract_init(int $id) impure inline_ref;

;; $Main$_contract_load
(int, (cell, int), cell) $Main$_contract_load() impure inline_ref;

;; $Main$_contract_store
() $Main$_contract_store((int, (cell, int), cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $Main$_fun_arrayOfLicenses
((int, (cell, int), cell), (cell, int)) $Main$_fun_arrayOfLicenses((int, (cell, int), cell) $self) impure inline_ref;

;; $Main$_fun_oneLicensebyId
((int, (cell, int), cell), (int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $Main$_fun_oneLicensebyId((int, (cell, int), cell) $self, int $licenseId) impure inline_ref;

;; $Main$_fun_LicenseIdbySellerAddress
((int, (cell, int), cell), int) $Main$_fun_LicenseIdbySellerAddress((int, (cell, int), cell) $self, slice $sellerAddress) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Main$_fun_forward
((int, (cell, int), cell), ()) $Main$_fun_forward((int, (cell, int), cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Main$_fun_reply
((int, (cell, int), cell), ()) $Main$_fun_reply((int, (cell, int), cell) $self, cell $body) impure inline;

;; $Main$_fun_notify
((int, (cell, int), cell), ()) $Main$_fun_notify((int, (cell, int), cell) $self, cell $body) impure inline;

;; $License$_constructor_licenseId_sellerAddress_buyerAddress_createdAt_contentName_contentDescription_contentUrls_licenseType_contentCategory_contentSubcategory_price_currency_allRestrictions_additionalTerms_status
((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $License$_constructor_licenseId_sellerAddress_buyerAddress_createdAt_contentName_contentDescription_contentUrls_licenseType_contentCategory_contentSubcategory_price_currency_allRestrictions_additionalTerms_status(int licenseId, slice sellerAddress, slice buyerAddress, int createdAt, slice contentName, slice contentDescription, slice contentUrls, slice licenseType, slice contentCategory, slice contentSubcategory, int price, slice currency, slice allRestrictions, slice additionalTerms, slice status) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
