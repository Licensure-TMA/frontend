;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: LicenseCreate
;; Header: 0x94c07f2b
;; TLB: license_create#94c07f2b sellerAddress:address contentName:^string contentDescription:^string contentUrls:^string licenseType:^string contentCategory:^string contentSubcategory:^string price:coins allRestrictions:^string additionalTerms:^string = LicenseCreate
;;

(slice, ((slice, slice, slice, slice, slice, slice, slice, int, slice, slice))) $LicenseCreate$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2495643435);
    var v'sellerAddress = sc_0~__tact_load_address();
    var v'contentName = sc_0~load_ref().begin_parse();
    var v'contentDescription = sc_0~load_ref().begin_parse();
    var v'contentUrls = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'licenseType = sc_1~load_ref().begin_parse();
    var v'contentCategory = sc_1~load_ref().begin_parse();
    var v'contentSubcategory = sc_1~load_ref().begin_parse();
    var v'price = sc_1~load_coins();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'allRestrictions = sc_2~load_ref().begin_parse();
    var v'additionalTerms = sc_2~load_ref().begin_parse();
    return (sc_0, (v'sellerAddress, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'allRestrictions, v'additionalTerms));
}

;;
;; Type: License
;; TLB: _ licenseId:int257 sellerAddress:address buyerAddress:address createdAt:uint32 contentName:^string contentDescription:^string contentUrls:^string licenseType:^string contentCategory:^string contentSubcategory:^string price:coins currency:^string allRestrictions:^string additionalTerms:^string status:^string = License
;;

builder $License$_store(builder build_0, (int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline_ref {
    var (v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status) = v;
    build_0 = build_0.store_int(v'licenseId, 257);
    build_0 = __tact_store_address(build_0, v'sellerAddress);
    build_0 = __tact_store_address(build_0, v'buyerAddress);
    build_0 = build_0.store_uint(v'createdAt, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'contentName).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'contentDescription).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'contentUrls).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'licenseType).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'contentCategory).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'contentSubcategory).end_cell());
    build_1 = build_1.store_coins(v'price);
    var build_2 = begin_cell();
    build_2 = build_2.store_ref(begin_cell().store_slice(v'currency).end_cell());
    build_2 = build_2.store_ref(begin_cell().store_slice(v'allRestrictions).end_cell());
    build_2 = build_2.store_ref(begin_cell().store_slice(v'additionalTerms).end_cell());
    var build_3 = begin_cell();
    build_3 = build_3.store_ref(begin_cell().store_slice(v'status).end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $License$_store_cell((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline {
    return $License$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $License$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'licenseId, slice vvv'sellerAddress, slice vvv'buyerAddress, int vvv'createdAt, slice vvv'contentName, slice vvv'contentDescription, slice vvv'contentUrls, slice vvv'licenseType, slice vvv'contentCategory, slice vvv'contentSubcategory, int vvv'price, slice vvv'currency, slice vvv'allRestrictions, slice vvv'additionalTerms, slice vvv'status) = __tact_tuple_destroy_15(v);
    return (vvv'licenseId, vvv'sellerAddress, vvv'buyerAddress, vvv'createdAt, vvv'contentName, vvv'contentDescription, vvv'contentUrls, vvv'licenseType, vvv'contentCategory, vvv'contentSubcategory, vvv'price, vvv'currency, vvv'allRestrictions, vvv'additionalTerms, vvv'status);
}

cell $License$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $License$_store_cell($License$_not_null(v));
}

(slice, ((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice))) $License$_load(slice sc_0) inline_ref {
    var v'licenseId = sc_0~load_int(257);
    var v'sellerAddress = sc_0~__tact_load_address();
    var v'buyerAddress = sc_0~__tact_load_address();
    var v'createdAt = sc_0~load_uint(32);
    var v'contentName = sc_0~load_ref().begin_parse();
    var v'contentDescription = sc_0~load_ref().begin_parse();
    var v'contentUrls = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'licenseType = sc_1~load_ref().begin_parse();
    var v'contentCategory = sc_1~load_ref().begin_parse();
    var v'contentSubcategory = sc_1~load_ref().begin_parse();
    var v'price = sc_1~load_coins();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'currency = sc_2~load_ref().begin_parse();
    var v'allRestrictions = sc_2~load_ref().begin_parse();
    var v'additionalTerms = sc_2~load_ref().begin_parse();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'status = sc_3~load_ref().begin_parse();
    return (sc_0, (v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status));
}

tuple $License$_as_optional((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) v) inline {
    var (v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status) = v;
    return __tact_tuple_create_15(v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status);
}

tuple $License$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $License$_as_optional(sc~$License$_load());
}

(int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice) $License$_to_external(((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) v) inline {
    var (v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status) = v; 
    return (v'licenseId, v'sellerAddress, v'buyerAddress, v'createdAt, v'contentName, v'contentDescription, v'contentUrls, v'licenseType, v'contentCategory, v'contentSubcategory, v'price, v'currency, v'allRestrictions, v'additionalTerms, v'status);
}

((int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $License$_constructor_licenseId_sellerAddress_buyerAddress_createdAt_contentName_contentDescription_contentUrls_licenseType_contentCategory_contentSubcategory_price_currency_allRestrictions_additionalTerms_status(int licenseId, slice sellerAddress, slice buyerAddress, int createdAt, slice contentName, slice contentDescription, slice contentUrls, slice licenseType, slice contentCategory, slice contentSubcategory, int price, slice currency, slice allRestrictions, slice additionalTerms, slice status) inline {
    return (licenseId, sellerAddress, buyerAddress, createdAt, contentName, contentDescription, contentUrls, licenseType, contentCategory, contentSubcategory, price, currency, allRestrictions, additionalTerms, status);
}

;;
;; Type: LicenseArray
;; TLB: _ map:dict<int, ^License{licenseId:int257,sellerAddress:address,buyerAddress:address,createdAt:uint32,contentName:^string,contentDescription:^string,contentUrls:^string,licenseType:^string,contentCategory:^string,contentSubcategory:^string,price:coins,currency:^string,allRestrictions:^string,additionalTerms:^string,status:^string}> length:uint64 = LicenseArray
;;

builder $LicenseArray$_store(builder build_0, (cell, int) v) inline {
    var (v'map, v'length) = v;
    build_0 = build_0.store_dict(v'map);
    build_0 = build_0.store_uint(v'length, 64);
    return build_0;
}

(slice, ((cell, int))) $LicenseArray$_load(slice sc_0) inline {
    var v'map = sc_0~load_dict();
    var v'length = sc_0~load_uint(64);
    return (sc_0, (v'map, v'length));
}

(cell, int) $LicenseArray$_to_external(((cell, int)) v) inline {
    var (v'map, v'length) = v; 
    return (v'map, v'length);
}

((cell, int)) $LicenseArray$_constructor_map(cell map) inline {
    return (map, 0);
}

;;
;; Type: LicenseDelete
;; Header: 0x2c5294ac
;; TLB: license_delete#2c5294ac licenseId:int257 sellerAddress:address = LicenseDelete
;;

(slice, ((int, slice))) $LicenseDelete$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 743609516);
    var v'licenseId = sc_0~load_int(257);
    var v'sellerAddress = sc_0~__tact_load_address();
    return (sc_0, (v'licenseId, v'sellerAddress));
}

;;
;; Type: LicenseBuy
;; Header: 0x863c797b
;; TLB: license_buy#863c797b licenseId:int257 buyerAddress:address = LicenseBuy
;;

(slice, ((int, slice))) $LicenseBuy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2252110203);
    var v'licenseId = sc_0~load_int(257);
    var v'buyerAddress = sc_0~__tact_load_address();
    return (sc_0, (v'licenseId, v'buyerAddress));
}

;;
;; Type: LicenseBuyV2
;; Header: 0x00ee7ecd
;; TLB: license_buy_v2#00ee7ecd licenseId:int257 buyerAddress:address cost:coins = LicenseBuyV2
;;

(slice, ((int, slice, int))) $LicenseBuyV2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 15630029);
    var v'licenseId = sc_0~load_int(257);
    var v'buyerAddress = sc_0~__tact_load_address();
    var v'cost = sc_0~load_coins();
    return (sc_0, (v'licenseId, v'buyerAddress, v'cost));
}

;;
;; Type: Main
;;

builder $Main$_store(builder build_0, (int, (cell, int), cell, cell, cell, slice) v) inline {
    var (v'id, (v'licenses'map, v'licenses'length), v'pairsUsersCreatedContracts, v'pairsUsersDeletedContracts, v'pairsUsersBoughtContracts, v'deployer) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = $LicenseArray$_store(build_0, (v'licenses'map, v'licenses'length));
    build_0 = build_0.store_dict(v'pairsUsersCreatedContracts);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'pairsUsersDeletedContracts);
    build_1 = build_1.store_dict(v'pairsUsersBoughtContracts);
    build_1 = __tact_store_address(build_1, v'deployer);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, (cell, int), cell, cell, cell, slice))) $Main$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'licenses = sc_0~$LicenseArray$_load();
    var v'pairsUsersCreatedContracts = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'pairsUsersDeletedContracts = sc_1~load_dict();
    var v'pairsUsersBoughtContracts = sc_1~load_dict();
    var v'deployer = sc_1~__tact_load_address();
    return (sc_0, (v'id, v'licenses, v'pairsUsersCreatedContracts, v'pairsUsersDeletedContracts, v'pairsUsersBoughtContracts, v'deployer));
}

(slice, ((int))) $Main$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(int, (cell, int), cell, cell, cell, slice) $Main$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Main$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id) = $sc~$Main$init$_load();
        $sc.end_parse();
        return $Main$_contract_init(id);
    }
}

() $Main$_contract_store((int, (cell, int), cell, cell, cell, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Main$_store(b, v);
    set_data(b.end_cell());
}