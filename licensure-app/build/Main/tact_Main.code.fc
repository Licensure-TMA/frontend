#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Main.headers.fc";
#include "tact_Main.stdlib.fc";
#include "tact_Main.constants.fc";
#include "tact_Main.storage.fc";

;;
;; Contract Main functions
;;

(int, (cell, int), cell) $Main$_contract_init(int $id) impure inline_ref {
    var (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)) = (null(), null(), null());
    $self'id = $id;
    ($self'licenses'map, $self'licenses'length) = $LicenseArray$_constructor_map(null());
    $self'pairs = null();
    return ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs);
}

((int, (cell, int), cell), (cell, int)) $Main$_fun_arrayOfLicenses((int, (cell, int), cell) $self) impure inline_ref {
    var (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)) = $self;
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ($self'licenses'map, $self'licenses'length));
}

((int, (cell, int), cell), (int, slice, slice, int, slice, slice, slice, slice, slice, slice, int, slice, slice, slice, slice)) $Main$_fun_oneLicensebyId((int, (cell, int), cell) $self, int $licenseId) impure inline_ref {
    var (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)) = $self;
    var ($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status) = $License$_not_null($License$_load_opt(__tact_dict_get_int_cell($self'licenses'map, 257, $licenseId)));
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status));
}

((int, (cell, int), cell), int) $Main$_fun_LicenseIdbySellerAddress((int, (cell, int), cell) $self, slice $sellerAddress) impure inline_ref {
    var (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)) = $self;
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), __tact_not_null(__tact_dict_get_slice_int($self'pairs, 267, $sellerAddress, 257)));
}

;;
;; Receivers of a Contract Main
;;

(((int, (cell, int), cell)), ()) $Main$_internal_binary_LicenseCreate((int, (cell, int), cell) $self, (slice, slice, slice, slice, slice, slice, slice, int, slice, slice) $msg) impure inline {
    var ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs) = $self;
    var ($msg'sellerAddress, $msg'contentName, $msg'contentDescription, $msg'contentUrls, $msg'licenseType, $msg'contentCategory, $msg'contentSubcategory, $msg'price, $msg'allRestrictions, $msg'additionalTerms) = $msg;
    int $licenseId = (string_hash($msg'contentDescription) / 100000000000000000000000000000000000);
    var ($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status) = $License$_constructor_licenseId_sellerAddress_buyerAddress_createdAt_contentName_contentDescription_contentUrls_licenseType_contentCategory_contentSubcategory_price_currency_allRestrictions_additionalTerms_status($licenseId, $msg'sellerAddress, __tact_create_address(0, 0), now(), $msg'contentName, $msg'contentDescription, $msg'contentUrls, $msg'licenseType, $msg'contentCategory, $msg'contentSubcategory, $msg'price, __gen_slice_string_7f23a419b837f87cb02beed6e36d91ee847b2ebce01b9ef5a02df2baf4c081a1(), $msg'allRestrictions, $msg'additionalTerms, __gen_slice_string_4ecaf18c39fa13cb82f1fc3ed343fe15bcf6a0c9df909679d7646463211f410c());
    $self'licenses'map~__tact_dict_set_int_cell(257, $licenseId, $License$_store_cell(($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status)));
    $self'licenses'length = ($self'licenses'length + 1);
    $self'pairs~__tact_dict_set_slice_int(267, $msg'sellerAddress, null(), 257);
    $self'pairs~__tact_dict_set_slice_int(267, $msg'sellerAddress, $licenseId, 257);
    ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)~$Main$_fun_reply($String$_fun_asComment(__tact_int_to_string($licenseId)));
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ());
}

(((int, (cell, int), cell)), ()) $Main$_internal_binary_LicenseDelete((int, (cell, int), cell) $self, (int) $msg) impure inline {
    var ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs) = $self;
    var ($msg'licenseId) = $msg;
    $self'licenses'map~__tact_dict_set_int_cell(257, $msg'licenseId, $License$_store_opt(null()));
    $self'licenses'length = ($self'licenses'length - 1);
    ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)~$Main$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ());
}

(((int, (cell, int), cell)), ()) $Main$_internal_binary_LicenseBuy((int, (cell, int), cell) $self, (int, slice) $msg) impure inline {
    var ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs) = $self;
    var ($msg'licenseId, $msg'buyerAddress) = $msg;
    var ($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status) = $License$_not_null($License$_load_opt(__tact_dict_get_int_cell($self'licenses'map, 257, $msg'licenseId)));
    $license'status = __gen_slice_string_84916524b9e8f10533f5cd9c2855ca81c0bb05fc84dcec43114cb12cc47300c5();
    $license'buyerAddress = $msg'buyerAddress;
    $self'licenses'map~__tact_dict_set_int_cell(257, $msg'licenseId, $License$_store_opt(null()));
    $self'licenses'map~__tact_dict_set_int_cell(257, $msg'licenseId, $License$_store_cell(($license'licenseId, $license'sellerAddress, $license'buyerAddress, $license'createdAt, $license'contentName, $license'contentDescription, $license'contentUrls, $license'licenseType, $license'contentCategory, $license'contentSubcategory, $license'price, $license'currency, $license'allRestrictions, $license'additionalTerms, $license'status)));
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 128, __gen_cell_comment_7d5de4b320891379f1fc7f718dd7a10de03f18bc98a42ead8f20a06524866d50()));
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ());
}

(((int, (cell, int), cell)), ()) $Main$_internal_binary_Deploy((int, (cell, int), cell) $self, (int) $deploy) impure inline {
    var ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs)~$Main$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, ($self'licenses'map, $self'licenses'length), $self'pairs), ());
}

;;
;; Get methods of a Contract Main
;;

_ %arrayOfLicenses() method_id(104337) {
    var self = $Main$_contract_load();
    var res = self~$Main$_fun_arrayOfLicenses();
    return $LicenseArray$_to_external(res);
}

_ %oneLicensebyId(int $$licenseId) method_id(127879) {
    int $licenseId = $$licenseId;
    var self = $Main$_contract_load();
    var res = self~$Main$_fun_oneLicensebyId($licenseId);
    return $License$_to_external(res);
}

_ %LicenseIdbySellerAddress(slice $$sellerAddress) method_id(94933) {
    slice $sellerAddress = __tact_verify_address($$sellerAddress);
    var self = $Main$_contract_load();
    var res = self~$Main$_fun_LicenseIdbySellerAddress($sellerAddress);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmf92NE5dStFSWgbkeHcCH2u7S19sPPH8bYoL64EZdw57X";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Main
;;

((int, (cell, int), cell), int) $Main$_contract_router_internal((int, (cell, int), cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive LicenseCreate message
    if (op == 2495643435) {
        var msg = in_msg~$LicenseCreate$_load();
        self~$Main$_internal_binary_LicenseCreate(msg);
        return (self, true);
    }
    
    ;; Receive LicenseDelete message
    if (op == 2185736809) {
        var msg = in_msg~$LicenseDelete$_load();
        self~$Main$_internal_binary_LicenseDelete(msg);
        return (self, true);
    }
    
    ;; Receive LicenseBuy message
    if (op == 2252110203) {
        var msg = in_msg~$LicenseBuy$_load();
        self~$Main$_internal_binary_LicenseBuy(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Main$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Main$_contract_load();
    
    ;; Handle operation
    int handled = self~$Main$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Main$_contract_store(self);
}
